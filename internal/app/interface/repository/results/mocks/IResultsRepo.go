// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "github.com/William9923/bulk-upload-poc/internal/app/domain"
	mock "github.com/stretchr/testify/mock"
)

// IResultsRepo is an autogenerated mock type for the IResultsRepo type
type IResultsRepo struct {
	mock.Mock
}

// CreateResult provides a mock function with given fields: _a0
func (_m *IResultsRepo) CreateResult(_a0 domain.Result) (int64, error) {
	ret := _m.Called(_a0)

	var r0 int64
	if rf, ok := ret.Get(0).(func(domain.Result) int64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Result) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResult provides a mock function with given fields: id
func (_m *IResultsRepo) GetResult(id int64) (domain.Result, error) {
	ret := _m.Called(id)

	var r0 domain.Result
	if rf, ok := ret.Get(0).(func(int64) domain.Result); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Result)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResults provides a mock function with given fields:
func (_m *IResultsRepo) GetResults() ([]domain.Result, error) {
	ret := _m.Called()

	var r0 []domain.Result
	if rf, ok := ret.Get(0).(func() []domain.Result); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveResult provides a mock function with given fields: _a0
func (_m *IResultsRepo) SaveResult(_a0 domain.Result) (domain.Result, error) {
	ret := _m.Called(_a0)

	var r0 domain.Result
	if rf, ok := ret.Get(0).(func(domain.Result) domain.Result); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(domain.Result)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Result) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
